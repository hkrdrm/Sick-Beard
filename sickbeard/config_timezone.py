#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
import sickbeard

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1398043367.67678
__CHEETAH_genTimestamp__ = 'Sun Apr 20 20:22:47 2014'
__CHEETAH_src__ = 'config_timezone.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Apr 20 08:00:30 2014'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class config_timezone(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(config_timezone, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        self._CHEETAH__globalSetVars["title"] = "Config - Notifications"
        self._CHEETAH__globalSetVars["header"] = "Notifications"
        write(u'''
''')
        self._CHEETAH__globalSetVars["sbPath"] = "../.."
        write(u'''
''')
        self._CHEETAH__globalSetVars["topmenu"] = "config"
        write(u'''
''')
        self._handleCheetahInclude(VFN(VFFSL(SL,"os.path",True),"join",False)(VFFSL(SL,"sickbeard.PROG_DIR",True), "data/interfaces/default/inc_top.tmpl"), trans=trans, includeFrom="file", raw=False)
        write(u'''
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 10, col 37
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 10, col 37.
        write(u'''/js/configNotifications.js?''')
        _v = VFFSL(SL,"sbPID",True) # u'$sbPID' on line 10, col 71
        if _v is not None: write(_filter(_v, rawExpr=u'$sbPID')) # from line 10, col 71.
        write(u'''"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 11, col 37
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 11, col 37.
        write(u'''/js/config.js?''')
        _v = VFFSL(SL,"sbPID",True) # u'$sbPID' on line 11, col 58
        if _v is not None: write(_filter(_v, rawExpr=u'$sbPID')) # from line 11, col 58.
        write(u'''"></script>

<div id="config">
    <div id="config-content">
        <form id="configForm" action="saveNotifications" method="post">
            <div id="config-components" class="notifier">


            <br />
            <h2>Home Theater</h2>
            <br />


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 26, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 26, col 57.
        write(u'''/images/notifiers/xbmc.png" alt="" title="XBMC" />
                        <h3><a href="http://xbmc.org/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 27, col 95
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 27, col 95.
        write(u'''\' + this.href, \'_blank\'); return false;">XBMC</a></h3>
                        <p>A free and open source cross-platform media center and home entertainment system software with a 10-foot user interface designed for the living-room TV.</p>
                        <p>For SickBeard to communicate with XBMC you must turn on the <a href="http://wiki.xbmc.org/index.php?title=Webserver" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 29, col 184
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 29, col 184.
        write(u'''\' + this.href, \'_blank\'); return false;">XBMC Webserver</a>.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_xbmc" id="use_xbmc" ''')
        if VFFSL(SL,"sickbeard.USE_XBMC",True) : # generated from line 33, col 98
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_xbmc">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send XBMC commands?</span>
                            </label>
                        </div>

                        <div id="content_use_xbmc">
                            <div class="field-pair">
                                <input type="checkbox" name="xbmc_always_on" id="xbmc_always_on" ''')
        if VFFSL(SL,"sickbeard.XBMC_ALWAYS_ON",True) : # generated from line 42, col 98
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="xbmc_always_on">
                                    <span class="component-title">Always On</span>
                                    <span class="component-desc">Log errors when unreachable?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="xbmc_notify_onsnatch" id="xbmc_notify_onsnatch" ''')
        if VFFSL(SL,"sickbeard.XBMC_NOTIFY_ONSNATCH",True) : # generated from line 49, col 110
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="xbmc_notify_onsnatch">
                                    <span class="component-title">Notify on Snatch</span>
                                    <span class="component-desc">Send notification when we start a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="xbmc_notify_ondownload" id="xbmc_notify_ondownload" ''')
        if VFFSL(SL,"sickbeard.XBMC_NOTIFY_ONDOWNLOAD",True) : # generated from line 56, col 114
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="xbmc_notify_ondownload">
                                    <span class="component-title">Notify on Download</span>
                                    <span class="component-desc">Send notification when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="xbmc_update_library" id="xbmc_update_library" ''')
        if VFFSL(SL,"sickbeard.XBMC_UPDATE_LIBRARY",True) : # generated from line 63, col 108
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="xbmc_update_library">
                                    <span class="component-title">Update Library</span>
                                    <span class="component-desc">Update library (show\'s path) when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="xbmc_update_full" id="xbmc_update_full" ''')
        if VFFSL(SL,"sickbeard.XBMC_UPDATE_FULL",True) : # generated from line 70, col 102
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="xbmc_update_full">
                                    <span class="component-title">Full Library Update</span>
                                    <span class="component-desc">Fall back to a full library update if per-show fails?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="xbmc_update_onlyfirst" id="xbmc_update_onlyfirst" ''')
        if VFFSL(SL,"sickbeard.XBMC_UPDATE_ONLYFIRST",True) : # generated from line 77, col 112
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="xbmc_update_onlyfirst">
                                    <span class="component-title">Only Update First Host</span>
                                    <span class="component-desc">Only send library update to the first host?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">XBMC IP:Port</span>
                                    <input type="text" name="xbmc_host" id="xbmc_host" value="''')
        _v = VFFSL(SL,"sickbeard.XBMC_HOST",True) # u'$sickbeard.XBMC_HOST' on line 86, col 95
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.XBMC_HOST')) # from line 86, col 95.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Host running XBMC (eg. 192.168.1.100:8080)</span>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">(multiple host strings must be separated by commas)</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">XBMC Username</span>
                                    <input type="text" name="xbmc_username" id="xbmc_username" value="''')
        _v = VFFSL(SL,"sickbeard.XBMC_USERNAME",True) # u'$sickbeard.XBMC_USERNAME' on line 100, col 103
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.XBMC_USERNAME')) # from line 100, col 103.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Username of your XBMC server (blank for none)</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">XBMC Password</span>
                                    <input type="password" name="xbmc_password" id="xbmc_password" value="''')
        _v = VFFSL(SL,"sickbeard.XBMC_PASSWORD",True) # u'$sickbeard.XBMC_PASSWORD' on line 110, col 107
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.XBMC_PASSWORD')) # from line 110, col 107.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Password of your XBMC server (blank for none)</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testXBMC-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test XBMC" id="testXBMC" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_xbmc //-->

                    </fieldset>
                </div><!-- /xbmc component-group //-->


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 128, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 128, col 57.
        write(u'''/images/notifiers/plex.png" alt="" title="Plex Media Server" />
                        <h3><a href="http://www.plexapp.com/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 129, col 102
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 129, col 102.
        write(u'''\' + this.href, \'_blank\'); return false;">Plex Media Server</a></h3>
                        <p>Experience your media on a visually stunning, easy to use interface on your Mac connected to your TV. Your media library has never looked this good!</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_plex" id="use_plex" ''')
        if VFFSL(SL,"sickbeard.USE_PLEX",True) : # generated from line 134, col 98
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_plex">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send Plex commands?</span>
                            </label>
                        </div>

                        <div id="content_use_plex">
                            <div class="field-pair">
                                <input type="checkbox" name="plex_notify_onsnatch" id="plex_notify_onsnatch" ''')
        if VFFSL(SL,"sickbeard.PLEX_NOTIFY_ONSNATCH",True) : # generated from line 143, col 110
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="plex_notify_onsnatch">
                                    <span class="component-title">Notify on Snatch</span>
                                    <span class="component-desc">Send notification when we start a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="plex_notify_ondownload" id="plex_notify_ondownload" ''')
        if VFFSL(SL,"sickbeard.PLEX_NOTIFY_ONDOWNLOAD",True) : # generated from line 150, col 114
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="plex_notify_ondownload">
                                    <span class="component-title">Notify on Download</span>
                                    <span class="component-desc">Send notification when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="plex_update_library" id="plex_update_library" ''')
        if VFFSL(SL,"sickbeard.PLEX_UPDATE_LIBRARY",True) : # generated from line 157, col 108
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="plex_update_library">
                                    <span class="component-title">Update Library</span>
                                    <span class="component-desc">Update Plex Media Server library when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Plex Media Server IP:Port</span>
                                    <input type="text" name="plex_server_host" id="plex_server_host" value="''')
        _v = VFFSL(SL,"sickbeard.PLEX_SERVER_HOST",True) # u'$sickbeard.PLEX_SERVER_HOST' on line 166, col 109
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.PLEX_SERVER_HOST')) # from line 166, col 109.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Host running Plex Media Server (eg. 192.168.1.100:32400)</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Plex Client IP:Port</span>
                                    <input type="text" name="plex_host" id="plex_host" value="''')
        _v = VFFSL(SL,"sickbeard.PLEX_HOST",True) # u'$sickbeard.PLEX_HOST' on line 176, col 95
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.PLEX_HOST')) # from line 176, col 95.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Host running Plex Client (eg. 192.168.1.100:3000)</span>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">(multiple host strings must be separated by commas)</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Plex Client Username</span>
                                    <input type="text" name="plex_username" id="plex_username" value="''')
        _v = VFFSL(SL,"sickbeard.PLEX_USERNAME",True) # u'$sickbeard.PLEX_USERNAME' on line 190, col 103
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.PLEX_USERNAME')) # from line 190, col 103.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Username of your Plex client API (blank for none)</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Plex Client Password</span>
                                    <input type="password" name="plex_password" id="plex_password" value="''')
        _v = VFFSL(SL,"sickbeard.PLEX_PASSWORD",True) # u'$sickbeard.PLEX_PASSWORD' on line 200, col 107
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.PLEX_PASSWORD')) # from line 200, col 107.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Password of your Plex client API (blank for none)</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testPLEX-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test Plex Media Clients" id="testPLEX" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_plex -->

                    </fieldset>
                </div><!-- /plex component-group -->


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 218, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 218, col 57.
        write(u'''/images/notifiers/nmj.png" alt="" title="Networked Media Jukebox" />
                        <h3><a href="http://www.popcornhour.com/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 219, col 106
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 219, col 106.
        write(u'''\' + this.href, \'_blank\'); return false;">NMJ</a></h3>
                        <p>The Networked Media Jukebox, or NMJ, is the official media jukebox interface made available for the Popcorn Hour 200-series.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_nmj" id="use_nmj" ''')
        if VFFSL(SL,"sickbeard.USE_NMJ",True) : # generated from line 224, col 96
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_nmj">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send update commands to NMJ?</span>
                            </label>
                        </div>

                        <div id="content_use_nmj">
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Popcorn IP address</span>
                                    <input type="text" name="nmj_host" id="nmj_host" value="''')
        _v = VFFSL(SL,"sickbeard.NMJ_HOST",True) # u'$sickbeard.NMJ_HOST' on line 235, col 93
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.NMJ_HOST')) # from line 235, col 93.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">IP of Popcorn 200-series (eg. 192.168.1.100)</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Get Settings</span>
                                    <input type="button" class="btn" value="Get Settings" id="settingsNMJ" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">The Popcorn Hour device must be powered on and NMJ running.</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">NMJ Database</span>
                                    <input type="text" name="nmj_database" id="nmj_database" value="''')
        _v = VFFSL(SL,"sickbeard.NMJ_DATABASE",True) # u'$sickbeard.NMJ_DATABASE' on line 255, col 101
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.NMJ_DATABASE')) # from line 255, col 101.
        write(u'''" size="35" ''')
        if VFFSL(SL,"sickbeard.NMJ_DATABASE",True) : # generated from line 255, col 136
            _v =  "readonly=\"readonly\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Automatically filled via the \'Get Settings\' button.</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">NMJ Mount URL</span>
                                    <input type="text" name="nmj_mount" id="nmj_mount" value="''')
        _v = VFFSL(SL,"sickbeard.NMJ_MOUNT",True) # u'$sickbeard.NMJ_MOUNT' on line 265, col 95
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.NMJ_MOUNT')) # from line 265, col 95.
        write(u'''" size="35" ''')
        if VFFSL(SL,"sickbeard.NMJ_MOUNT",True) : # generated from line 265, col 127
            _v =  "readonly=\"readonly\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Automatically filled via the \'Get Settings\' button.</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testNMJ-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test NMJ" id="testNMJ" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_nmj //-->

                    </fieldset>
                </div><!-- /nmj component-group //-->

                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 282, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 282, col 57.
        write(u'''/images/notifiers/nmj.png" alt="" title="Networked Media Jukebox V2" />
                        <h3><a href="http://www.popcornhour.com/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 283, col 106
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 283, col 106.
        write(u'''\' + this.href, \'_blank\'); return false;">NMJv2</a></h3>
                        <p>The Networked Media Jukebox, or NMJv2, is the official media jukebox interface made available for the Popcorn Hour 300 &amp; 400-series.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_nmjv2" id="use_nmjv2" ''')
        if VFFSL(SL,"sickbeard.USE_NMJv2",True) : # generated from line 288, col 100
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_nmjv2">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send update commands to NMJv2?</span>
                            </label>
                        </div>

                        <div id="content_use_nmjv2">
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Popcorn IP address</span>
                                    <input type="text" name="nmjv2_host" id="nmjv2_host" value="''')
        _v = VFFSL(SL,"sickbeard.NMJv2_HOST",True) # u'$sickbeard.NMJv2_HOST' on line 299, col 97
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.NMJv2_HOST')) # from line 299, col 97.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">IP of Popcorn 300/400-series (eg. 192.168.1.100)</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Database Location</span>
                                    <span class="component-desc">
                                        <input type="radio" name="nmjv2_dbloc" value="local" class="radio" id="nmjv2_dbloc_a" ''')
        if VFFSL(SL,"sickbeard.NMJv2_DBLOC",True)=="local" : # generated from line 310, col 127
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />PCH Local Media<br />
                                    </span>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">
                                        <input type="radio" name="nmjv2_dbloc" value="network" class="radio" id="nmjv2_dbloc_b" ''')
        if VFFSL(SL,"sickbeard.NMJv2_DBLOC",True)=="network" : # generated from line 316, col 129
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />PCH Network Media<br />
                                    </span>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">Database Instance</span>
                                    <span class="component-desc">
                                        <select id="NMJv2db_instance">
                                            <option value="0">#1 </option>
                                            <option value="1">#2 </option>
                                            <option value="2">#3 </option>
                                            <option value="3">#4 </option>
                                            <option value="4">#5 </option>
                                            <option value="5">#6 </option>
                                            <option value="6">#7 </option>
                                        </select>
                                    </span>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Adjust this value if the wrong database is selected.</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Find Database</span>
                                    <input type="button" class="btn" value="Find Database" id="settingsNMJv2" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">The Popcorn Hour device must be powered on.</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                <span class="component-title">NMJv2 Database</span>
                                <input type="text" name="nmjv2_database" id="nmjv2_database" value="''')
        _v = VFFSL(SL,"sickbeard.NMJv2_DATABASE",True) # u'$sickbeard.NMJv2_DATABASE' on line 351, col 101
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.NMJv2_DATABASE')) # from line 351, col 101.
        write(u'''" size="35" ''')
        if VFFSL(SL,"sickbeard.NMJv2_DATABASE",True) : # generated from line 351, col 138
            _v =  "readonly=\"readonly\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' /></label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Automatically filled via the \'Find Database\' buttons.</span>
                                </label>
                            </div>
                        <div class="testNotification" id="testNMJv2-result">Click below to test.</div>
                        <input type="button" class="btn" value="Test NMJv2" id="testNMJv2" />
                        <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_nmjv2 //-->

                    </fieldset>
                </div><!-- /nmjv2 component-group //-->


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 368, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 368, col 57.
        write(u'''/images/notifiers/synoindex.png" alt="" title="Synology Indexer" />
                        <h3><a href="http://synology.com/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 369, col 99
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 369, col 99.
        write(u'''\' + this.href, \'_blank\'); return false;">Synology Indexer</a></h3>
                        <p>Synology Indexer is the daemon running on the Synology NAS to build its media database.</p>
                    </div>

                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_synoindex" id="use_synoindex" ''')
        if VFFSL(SL,"sickbeard.USE_SYNOINDEX",True) : # generated from line 375, col 108
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_synoindex">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send notifications to the synoindex daemon?<br /><br />
                                </span>
                            </label>
                            <label class="nocheck clearfix" for="use_synoindex">
                                <span class="component-title">&nbsp;</span>
                                <span class="component-desc"><b>Note:</b> Requires SB to be running on your Synology NAS.</span>
                            </label>
                        </div>

                        <div id="content_use_synoindex">
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_pytivo //-->

                    </fieldset>
                </div><!-- /synoindex component-group //-->


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 397, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 397, col 57.
        write(u'''/images/notifiers/pytivo.png" alt="" title="pyTivo" />
                        <h3><a href="http://pytivo.sourceforge.net/wiki/index.php/PyTivo" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 398, col 130
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 398, col 130.
        write(u'''\' + this.href, \'_blank\'); return false;">pyTivo</a></h3>
                        <p>pyTivo is both an HMO and GoBack server.  This notifier will load the completed downloads to your Tivo.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_pytivo" id="use_pytivo" ''')
        if VFFSL(SL,"sickbeard.USE_PYTIVO",True) : # generated from line 403, col 102
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_pytivo">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send notifications to pyTivo?<br /><br /></span>
                            </label>
                            <label class="nocheck clearfix" for="use_pytivo">
                                <span class="component-title">&nbsp;</span>
                                <span class="component-desc">Requires the downloaded files to be accessible to pyTivo.</span>
                            </label>
                        </div>

                        <div id="content_use_pytivo">
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">pyTivo IP:Port</span>
                                    <input type="text" name="pytivo_host" id="pytivo_host" value="''')
        _v = VFFSL(SL,"sickbeard.PYTIVO_HOST",True) # u'$sickbeard.PYTIVO_HOST' on line 418, col 99
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.PYTIVO_HOST')) # from line 418, col 99.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Host running pyTivo (eg. 192.168.1.1:9032)</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">pyTivo Share name</span>
                                    <input type="text" name="pytivo_share_name" id="pytivo_share_name" value="''')
        _v = VFFSL(SL,"sickbeard.PYTIVO_SHARE_NAME",True) # u'$sickbeard.PYTIVO_SHARE_NAME' on line 428, col 111
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.PYTIVO_SHARE_NAME')) # from line 428, col 111.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Value used in pyTivo Web Configuration to name the share.</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Tivo Name</span>
                                    <input type="text" name="pytivo_tivo_name" id="pytivo_tivo_name" value="''')
        _v = VFFSL(SL,"sickbeard.PYTIVO_TIVO_NAME",True) # u'$sickbeard.PYTIVO_TIVO_NAME' on line 438, col 109
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.PYTIVO_TIVO_NAME')) # from line 438, col 109.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Messages &amp; Settings > Account &amp; System Information > System Information > DVR name</span>
                                </label>
                            </div>
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_pytivo //-->

                    </fieldset>
                </div><!-- /component-group //-->

                <div class="component-group-save">
                    <input type="submit" class="btn config_submitter" value="Save Changes" />
                </div><br />

                <br />
                <h2>Devices</h2>
                <br />


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 462, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 462, col 57.
        write(u'''/images/notifiers/growl.png" alt="" title="Growl" />
                        <h3><a href="http://growl.info/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 463, col 97
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 463, col 97.
        write(u'''\' + this.href, \'_blank\'); return false;">Growl</a></h3>
                        <p>A cross-platform unobtrusive global notification system.</p>
                        <p>For more information visit our <a href="https://github.com/midgetspy/Sick-Beard/wiki/Notifiers:-Growl" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 465, col 170
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 465, col 170.
        write(u'''\' + this.href, \'_blank\'); return false;">Wiki</a>.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_growl" id="use_growl" ''')
        if VFFSL(SL,"sickbeard.USE_GROWL",True) : # generated from line 469, col 100
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_growl">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send Growl notifications?</span>
                            </label>
                        </div>

                        <div id="content_use_growl">
                            <div class="field-pair">
                                <input type="checkbox" name="growl_notify_onsnatch" id="growl_notify_onsnatch" ''')
        if VFFSL(SL,"sickbeard.GROWL_NOTIFY_ONSNATCH",True) : # generated from line 478, col 112
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="growl_notify_onsnatch">
                                    <span class="component-title">Notify on Snatch</span>
                                    <span class="component-desc">Send notification when we start a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="growl_notify_ondownload" id="growl_notify_ondownload" ''')
        if VFFSL(SL,"sickbeard.GROWL_NOTIFY_ONDOWNLOAD",True) : # generated from line 485, col 116
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="growl_notify_ondownload">
                                    <span class="component-title">Notify on Download</span>
                                    <span class="component-desc">Send notification when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Growl IP:Port</span>
                                    <input type="text" name="growl_host" id="growl_host" value="''')
        _v = VFFSL(SL,"sickbeard.GROWL_HOST",True) # u'$sickbeard.GROWL_HOST' on line 494, col 97
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.GROWL_HOST')) # from line 494, col 97.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Host running Growl (eg. 192.168.1.100:23053)</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Growl Password</span>
                                    <input type="password" name="growl_password" id="growl_password" value="''')
        _v = VFFSL(SL,"sickbeard.GROWL_PASSWORD",True) # u'$sickbeard.GROWL_PASSWORD' on line 504, col 109
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.GROWL_PASSWORD')) # from line 504, col 109.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">May leave blank if Sick Beard is on the same host.</span>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Otherwise Growl <b>requires</b> a password to be used.</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testGrowl-result">Click below to register and test Growl, this is required for Growl notifications to work.</div>
                            <input type="button" class="btn" value="Register Growl" id="testGrowl" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_growl //-->

                    </fieldset>
                </div><!-- /growl component-group //-->


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 526, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 526, col 57.
        write(u'''/images/notifiers/prowl.png" alt="Prowl" title="Prowl" />
                        <h3><a href="http://www.prowlapp.com/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 527, col 103
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 527, col 103.
        write(u'''\' + this.href, \'_blank\'); return false;">Prowl</a></h3>
                        <p>A Growl client for iOS.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_prowl" id="use_prowl" ''')
        if VFFSL(SL,"sickbeard.USE_PROWL",True) : # generated from line 532, col 100
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_prowl">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send Prowl notifications?</span>
                            </label>
                        </div>

                        <div id="content_use_prowl">
                            <div class="field-pair">
                                <input type="checkbox" name="prowl_notify_onsnatch" id="prowl_notify_onsnatch" ''')
        if VFFSL(SL,"sickbeard.PROWL_NOTIFY_ONSNATCH",True) : # generated from line 541, col 112
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="prowl_notify_onsnatch">
                                    <span class="component-title">Notify on Snatch</span>
                                    <span class="component-desc">Send notification when we start a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="prowl_notify_ondownload" id="prowl_notify_ondownload" ''')
        if VFFSL(SL,"sickbeard.PROWL_NOTIFY_ONDOWNLOAD",True) : # generated from line 548, col 116
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="prowl_notify_ondownload">
                                    <span class="component-title">Notify on Download</span>
                                    <span class="component-desc">Send notification when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Prowl API key:</span>
                                    <input type="text" name="prowl_api" id="prowl_api" value="''')
        _v = VFFSL(SL,"sickbeard.PROWL_API",True) # u'$sickbeard.PROWL_API' on line 557, col 95
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.PROWL_API')) # from line 557, col 95.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Get your key at: <a href="https://www.prowlapp.com/api_settings.php" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 561, col 174
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 561, col 174.
        write(u'''\' + this.href, \'_blank\'); return false;">https://prowlapp.com/api_settings.php</a></span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Prowl Priority:</span>
                                   <select id="prowl_priority" name="prowl_priority">
                                        <option value="-2" ''')
        if VFFSL(SL,"sickbeard.PROWL_PRIORITY",True) == "-2" : # generated from line 568, col 60
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>Very Low</option>
                                        <option value="-1" ''')
        if VFFSL(SL,"sickbeard.PROWL_PRIORITY",True) == "-1" : # generated from line 569, col 60
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>Moderate</option>
                                        <option value="0" ''')
        if VFFSL(SL,"sickbeard.PROWL_PRIORITY",True) == "0" : # generated from line 570, col 59
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>Normal</option>
                                        <option value="1" ''')
        if VFFSL(SL,"sickbeard.PROWL_PRIORITY",True) == "1" : # generated from line 571, col 59
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>High</option>
                                        <option value="2" ''')
        if VFFSL(SL,"sickbeard.PROWL_PRIORITY",True) == "2" : # generated from line 572, col 59
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>Emergency</option>
                                    </select>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Priority of Prowl messages from Sick-Beard.</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testProwl-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test Prowl" id="testProwl" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_prowl //-->

                    </fieldset>
                </div><!-- /prowl component-group //-->


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 591, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 591, col 57.
        write(u'''/images/notifiers/libnotify.png" alt="" title="Libnotify" />
                        <h3><a href="http://library.gnome.org/devel/libnotify/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 592, col 120
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 592, col 120.
        write(u'''\' + this.href, \'_blank\'); return false;">Libnotify</a></h3>
                        <p>The standard desktop notification API for Linux/*nix systems.  This notifier will only function if the pynotify module is installed (Ubuntu/Debian package <a href="apt:python-notify">python-notify</a>).</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_libnotify" id="use_libnotify" ''')
        if VFFSL(SL,"sickbeard.USE_LIBNOTIFY",True) : # generated from line 597, col 108
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_libnotify">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send Libnotify notifications?</span>
                            </label>
                        </div>

                        <div id="content_use_libnotify">
                            <div class="field-pair">
                                <input type="checkbox" name="libnotify_notify_onsnatch" id="libnotify_notify_onsnatch" ''')
        if VFFSL(SL,"sickbeard.LIBNOTIFY_NOTIFY_ONSNATCH",True) : # generated from line 606, col 120
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="libnotify_notify_onsnatch">
                                    <span class="component-title">Notify on Snatch</span>
                                    <span class="component-desc">Send notification when we start a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="libnotify_notify_ondownload" id="libnotify_notify_ondownload" ''')
        if VFFSL(SL,"sickbeard.LIBNOTIFY_NOTIFY_ONDOWNLOAD",True) : # generated from line 613, col 124
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="libnotify_notify_ondownload">
                                    <span class="component-title">Notify on Download</span>
                                    <span class="component-desc">Send notification when we finish a download?</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testLibnotify-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test Libnotify" id="testLibnotify" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_libnotify //-->

                    </fieldset>
                </div><!-- /libnotify component-group //-->


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 630, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 630, col 57.
        write(u'''/images/notifiers/pushover.png" alt="" title="Pushover" />
                        <h3><a href="http://pushover.net/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 631, col 99
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 631, col 99.
        write(u'''\' + this.href, \'_blank\'); return false;">Pushover</a></h3>
                        <p>Pushover makes it easy to send real-time notifications to your Android and iOS devices.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_pushover" id="use_pushover" ''')
        if VFFSL(SL,"sickbeard.USE_PUSHOVER",True) : # generated from line 636, col 106
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_pushover">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send notifications through Pushover?</span>
                            </label>
                        </div>

                        <div id="content_use_pushover">
                            <div class="field-pair">
                                <input type="checkbox" name="pushover_notify_onsnatch" id="pushover_notify_onsnatch" ''')
        if VFFSL(SL,"sickbeard.PUSHOVER_NOTIFY_ONSNATCH",True) : # generated from line 645, col 118
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="pushover_notify_onsnatch">
                                    <span class="component-title">Notify on Snatch</span>
                                    <span class="component-desc">Send notification when we start a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="pushover_notify_ondownload" id="pushover_notify_ondownload" ''')
        if VFFSL(SL,"sickbeard.PUSHOVER_NOTIFY_ONDOWNLOAD",True) : # generated from line 652, col 122
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="pushover_notify_ondownload">
                                    <span class="component-title">Notify on Download</span>
                                    <span class="component-desc">Send notification when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Pushover User Key</span>
                                    <input type="text" name="pushover_userkey" id="pushover_userkey" value="''')
        _v = VFFSL(SL,"sickbeard.PUSHOVER_USERKEY",True) # u'$sickbeard.PUSHOVER_USERKEY' on line 661, col 109
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.PUSHOVER_USERKEY')) # from line 661, col 109.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">User key of your Pushover account</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testPushover-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test Pushover" id="testPushover" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_pushover //-->

                    </fieldset>
                </div><!-- /pushover component-group //-->

                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 678, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 678, col 57.
        write(u'''/images/notifiers/boxcar.png" alt="" title="Boxcar" />
                        <h3><a href="http://boxcar.io/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 679, col 96
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 679, col 96.
        write(u'''\' + this.href, \'_blank\'); return false;">Boxcar</a></h3>
                        <p>Read your messages where and when you want them! A subscription will be sent if needed.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_boxcar" id="use_boxcar" ''')
        if VFFSL(SL,"sickbeard.USE_BOXCAR",True) : # generated from line 684, col 102
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_boxcar">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send notifications through Boxcar?</span>
                            </label>
                        </div>

                        <div id="content_use_boxcar">
                            <div class="field-pair">
                                <input type="checkbox" name="boxcar_notify_onsnatch" id="boxcar_notify_onsnatch" ''')
        if VFFSL(SL,"sickbeard.BOXCAR_NOTIFY_ONSNATCH",True) : # generated from line 693, col 114
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="boxcar_notify_onsnatch">
                                    <span class="component-title">Notify on Snatch</span>
                                    <span class="component-desc">Send notification when we start a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="boxcar_notify_ondownload" id="boxcar_notify_ondownload" ''')
        if VFFSL(SL,"sickbeard.BOXCAR_NOTIFY_ONDOWNLOAD",True) : # generated from line 700, col 118
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="boxcar_notify_ondownload">
                                    <span class="component-title">Notify on Download</span>
                                    <span class="component-desc">Send notification when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Boxcar Username</span>
                                    <input type="text" name="boxcar_username" id="boxcar_username" value="''')
        _v = VFFSL(SL,"sickbeard.BOXCAR_USERNAME",True) # u'$sickbeard.BOXCAR_USERNAME' on line 709, col 107
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.BOXCAR_USERNAME')) # from line 709, col 107.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Username of your Boxcar account</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testBoxcar-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test Boxcar" id="testBoxcar" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_boxcar //-->

                    </fieldset>
                </div><!-- /boxcar component-group //-->


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 727, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 727, col 57.
        write(u'''/images/notifiers/nma.png" alt="" title="NMA" />
                        <h3><a href="http://nma.usk.bz" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 728, col 96
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 728, col 96.
        write(u'''\' + this.href, \'_blank\'); return false;">Notify My Android</a></h3>
                        <p>Notify My Android is a Prowl-like Android App and API that offers an easy way to send notifications from your application directly to your Android device.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_nma" id="use_nma" ''')
        if VFFSL(SL,"sickbeard.USE_NMA",True) : # generated from line 733, col 96
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_nma">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send NMA notifications?</span>
                            </label>
                        </div>

                        <div id="content_use_nma">
                            <div class="field-pair">
                                <input type="checkbox" name="nma_notify_onsnatch" id="nma_notify_onsnatch" ''')
        if VFFSL(SL,"sickbeard.NMA_NOTIFY_ONSNATCH",True) : # generated from line 742, col 108
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="nma_notify_onsnatch">
                                    <span class="component-title">Notify on Snatch</span>
                                    <span class="component-desc">Send notification when we start a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="nma_notify_ondownload" id="nma_notify_ondownload" ''')
        if VFFSL(SL,"sickbeard.NMA_NOTIFY_ONDOWNLOAD",True) : # generated from line 749, col 112
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="nma_notify_ondownload">
                                    <span class="component-title">Notify on Download</span>
                                    <span class="component-desc">Send notification when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                       <span class="component-title">NMA API key:</span>
                                    <input type="text" name="nma_api" id="nma_api" value="''')
        _v = VFFSL(SL,"sickbeard.NMA_API",True) # u'$sickbeard.NMA_API' on line 758, col 91
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.NMA_API')) # from line 758, col 91.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Multiple keys (maxium of 5) must be seperated by commas</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">NMA priority:</span>
                                       <select id="nma_priority" name="nma_priority">
                                        <option value="-2" ''')
        if VFFSL(SL,"sickbeard.NMA_PRIORITY",True) == "-2" : # generated from line 769, col 60
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>Very Low</option>
                                        <option value="-1" ''')
        if VFFSL(SL,"sickbeard.NMA_PRIORITY",True) == "-1" : # generated from line 770, col 60
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>Moderate</option>
                                        <option value="0" ''')
        if VFFSL(SL,"sickbeard.NMA_PRIORITY",True) == "0" : # generated from line 771, col 59
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>Normal</option>
                                        <option value="1" ''')
        if VFFSL(SL,"sickbeard.NMA_PRIORITY",True) == "1" : # generated from line 772, col 59
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>High</option>
                                        <option value="2" ''')
        if VFFSL(SL,"sickbeard.NMA_PRIORITY",True) == "2" : # generated from line 773, col 59
            _v =  'selected="selected"' 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u'''>Emergency</option>
                                    </select>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Priority of NMA messages from Sick-Beard.</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testNMA-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test NMA" id="testNMA" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_nma //-->

                    </fieldset>
                </div><!-- /nma component-group //-->

                <div class="component-group-save">
                    <input type="submit" class="btn config_submitter" value="Save Changes" />
                </div><br />

                <br />
                <h2>Online</h2>
                <br />


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 800, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 800, col 57.
        write(u'''/images/notifiers/twitter.png" alt="" title="Twitter" />
                        <h3><a href="http://www.twitter.com/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 801, col 102
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 801, col 102.
        write(u'''\' + this.href, \'_blank\'); return false;">Twitter</a></h3>
                        <p>A social networking and microblogging service, enabling its users to send and read other users\' messages called tweets.</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_twitter" id="use_twitter" ''')
        if VFFSL(SL,"sickbeard.USE_TWITTER",True) : # generated from line 806, col 104
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_twitter">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard post tweets on Twitter?</span>
                            </label>
                            <label class="nocheck clearfix" for="use_twitter">
                                <span class="component-title">&nbsp;</span>
                                <span class="component-desc">You may want to use a second account.</span>
                            </label>
                        </div>

                        <div id="content_use_twitter">
                            <div class="field-pair">
                                <input type="checkbox" name="twitter_notify_onsnatch" id="twitter_notify_onsnatch" ''')
        if VFFSL(SL,"sickbeard.TWITTER_NOTIFY_ONSNATCH",True) : # generated from line 819, col 116
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="twitter_notify_onsnatch">
                                    <span class="component-title">Notify on Snatch</span>
                                    <span class="component-desc">Send notification when we start a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <input type="checkbox" name="twitter_notify_ondownload" id="twitter_notify_ondownload" ''')
        if VFFSL(SL,"sickbeard.TWITTER_NOTIFY_ONDOWNLOAD",True) : # generated from line 826, col 120
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                                <label class="clearfix" for="twitter_notify_ondownload">
                                    <span class="component-title">Notify on Download</span>
                                    <span class="component-desc">Send notification when we finish a download?</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="clearfix">
                                    <span class="component-title">Step One</span>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-desc">Click the "Request Authorization" button.<br/> This will open a new page containing an auth key.<br/> Note: if nothing happens check your popup blocker.<br/></span>
                                    <input type="button" class="btn" value="Request Authorization" id="twitterStep1" />
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="clearfix">
                                    <span class="component-title">Step Two</span>
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-desc">Enter the key Twitter gave you below, and click "Verify Key".<br/></span>
                                    <input type="text" id="twitter_key" value="" size="35" />
                                    <input type="button" class="btn" value="Verify Key" id="twitterStep2" />
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="clearfix">
                                    <span class="component-title">Step Three</span>
                                </label>
                            </div>
                            <div class="testNotification" id="testTwitter-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test Twitter" id="testTwitter" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_twitter //-->

                    </fieldset>
                </div><!-- /twitter component-group //-->


                <div class="component-group clearfix">
                    <div class="component-group-desc">
                        <img class="notifier-icon" src="''')
        _v = VFFSL(SL,"sbRoot",True) # u'$sbRoot' on line 867, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'$sbRoot')) # from line 867, col 57.
        write(u'''/images/notifiers/trakt.png" alt="" title="Trakt" />
                        <h3><a href="http://trakt.tv/" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 868, col 95
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 868, col 95.
        write(u'''\' + this.href, \'_blank\'); return false;">Trakt</a></h3>
                        <p>trakt helps keep a record of what TV shows and movies you are watching. Based on your favorites, trakt recommends additional shows and movies you\'ll enjoy!</p>
                    </div>
                    <fieldset class="component-group-list">
                        <div class="field-pair">
                            <input type="checkbox" class="enabler" name="use_trakt" id="use_trakt" ''')
        if VFFSL(SL,"sickbeard.USE_TRAKT",True) : # generated from line 873, col 100
            _v =  "checked=\"checked\"" 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ""
            if _v is not None: write(_filter(_v))
        write(u''' />
                            <label class="clearfix" for="use_trakt">
                                <span class="component-title">Enable</span>
                                <span class="component-desc">Should Sick Beard send Trakt.tv notifications?</span>
                            </label>
                        </div>

                        <div id="content_use_trakt">
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Trakt Username</span>
                                    <input type="text" name="trakt_username" id="trakt_username" value="''')
        _v = VFFSL(SL,"sickbeard.TRAKT_USERNAME",True) # u'$sickbeard.TRAKT_USERNAME' on line 884, col 105
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.TRAKT_USERNAME')) # from line 884, col 105.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Username of your Trakt account.</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Trakt Password</span>
                                    <input type="password" name="trakt_password" id="trakt_password" value="''')
        _v = VFFSL(SL,"sickbeard.TRAKT_PASSWORD",True) # u'$sickbeard.TRAKT_PASSWORD' on line 894, col 109
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.TRAKT_PASSWORD')) # from line 894, col 109.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Password of your Trakt account.</span>
                                </label>
                            </div>
                            <div class="field-pair">
                                <label class="nocheck clearfix">
                                    <span class="component-title">Trakt API key:</span>
                                    <input type="text" name="trakt_api" id="trakt_api" value="''')
        _v = VFFSL(SL,"sickbeard.TRAKT_API",True) # u'$sickbeard.TRAKT_API' on line 904, col 95
        if _v is not None: write(_filter(_v, rawExpr=u'$sickbeard.TRAKT_API')) # from line 904, col 95.
        write(u'''" size="35" />
                                </label>
                                <label class="nocheck clearfix">
                                    <span class="component-title">&nbsp;</span>
                                    <span class="component-desc">Get your key at: <a href="http://trakt.tv/settings/api" rel="noreferrer" onclick="window.open(\'''')
        _v = VFFSL(SL,"sickbeard.ANON_REDIRECT",True) # u'${sickbeard.ANON_REDIRECT}' on line 908, col 161
        if _v is not None: write(_filter(_v, rawExpr=u'${sickbeard.ANON_REDIRECT}')) # from line 908, col 161.
        write(u'''\' + this.href, \'_blank\'); return false;">http://trakt.tv/settings/api</a></span>
                                </label>
                            </div>
                            <div class="testNotification" id="testTrakt-result">Click below to test.</div>
                            <input type="button" class="btn" value="Test Trakt" id="testTrakt" />
                            <input type="submit" class="btn config_submitter" value="Save Changes" />
                        </div><!-- /content_use_trakt //-->

                    </fieldset>
                </div><!-- /trakt component-group //-->

                <div class="component-group-save">
                    <input type="submit" class="btn config_submitter" value="Save Changes" />
                </div><br />

            </div><!-- /config-components //-->
        </form>
    </div>
</div>
<div class="clearfix"></div>

''')
        self._handleCheetahInclude(VFN(VFFSL(SL,"os.path",True),"join",False)(VFFSL(SL,"sickbeard.PROG_DIR",True), "data/interfaces/default/inc_bottom.tmpl"), trans=trans, includeFrom="file", raw=False)
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_config_timezone= 'respond'

## END CLASS DEFINITION

if not hasattr(config_timezone, '_initCheetahAttributes'):
    templateAPIClass = getattr(config_timezone, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(config_timezone)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=config_timezone()).run()


